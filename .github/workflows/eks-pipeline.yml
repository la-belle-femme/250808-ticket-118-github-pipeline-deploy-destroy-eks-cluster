name: EKS Cluster Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  CLUSTER_NAME: github-action-eks-cluster
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve -input=false

      - name: Destroy EKS Cluster
        if: github.event.inputs.action == 'destroy'
        timeout-minutes: 45
        run: |
          #!/bin/bash
          set -eo pipefail

          # Verify AWS permissions
          function verify_permissions() {
            echo "::group::Verifying IAM Permissions"
            aws eks describe-cluster \
              --name "$CLUSTER_NAME" \
              --region "$AWS_REGION" || {
                echo "::error::Failed to describe cluster - check IAM permissions"
                exit 1
              }
            echo "::endgroup::"
          }

          # Force delete all cluster resources
          function force_delete_cluster() {
            echo "::group::1. Forcing Cluster Deletion"
            aws eks delete-cluster \
              --name "$CLUSTER_NAME" \
              --region "$AWS_REGION" || true
            
            echo "Waiting for cluster deletion (max 15 minutes)..."
            timeout 900 aws eks wait cluster-deleted \
              --name "$CLUSTER_NAME" \
              --region "$AWS_REGION" || true
            echo "::endgroup::"
          }

          # Cleanup remaining resources
          function cleanup_orphans() {
            echo "::group::2. Cleaning Orphaned Resources"
            
            # CloudFormation stacks
            stacks=$(aws cloudformation list-stacks \
              --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
              --query "StackSummaries[?contains(StackName, '$CLUSTER_NAME')].StackName" \
              --output text --region "$AWS_REGION" 2>/dev/null || echo "")
            
            for stack in $stacks; do
              aws cloudformation delete-stack \
                --stack-name "$stack" \
                --region "$AWS_REGION" || true
            done

            # Load Balancers
            lbs=$(aws elbv2 describe-load-balancers \
              --query "LoadBalancers[?contains(LoadBalancerName, '$CLUSTER_NAME')].LoadBalancerArn" \
              --output text --region "$AWS_REGION" 2>/dev/null || echo "")
            
            for lb in $lbs; do
              aws elbv2 delete-load-balancer \
                --load-balancer-arn "$lb" \
                --region "$AWS_REGION" || true
            done
            echo "::endgroup::"
          }

          # Main execution
          verify_permissions

          echo "::group::Running Terraform Destroy"
          terraform destroy -auto-approve -input=false -refresh=false
          echo "::endgroup::"

          force_delete_cluster
          cleanup_orphans

          echo "::group::Final Verification"
          if aws eks describe-cluster \
            --name "$CLUSTER_NAME" \
            --region "$AWS_REGION" &>/dev/null; then
            echo "::error::Cluster $CLUSTER_NAME still exists after destruction!"
            exit 1
          else
            echo "âœ… Cluster $CLUSTER_NAME successfully destroyed"
          fi
          echo "::endgroup::"
