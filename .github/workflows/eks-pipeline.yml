name: EKS Cluster Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  CLUSTER_NAME: your-cluster-name  # Set this in GitHub secrets/variables
  AWS_REGION: us-east-1            # Set this in GitHub secrets/variables

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC
      contents: read   # Required for checkout

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        timeout-minutes: 30  # Allow extra time for cleanup
        run: |
          set -e  # Exit immediately on errors

          # Verify cluster exists before deletion
          if ! aws eks describe-cluster \
            --name ${{ env.CLUSTER_NAME }} \
            --region ${{ env.AWS_REGION }} &>/dev/null; then
            echo "Cluster not found - nothing to destroy"
            exit 0
          fi

          # Delete nodegroups
          NODEGROUPS=$(aws eks list-nodegroups \
            --cluster-name ${{ env.CLUSTER_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query "nodegroups" \
            --output text || echo "")
          
          if [ -n "$NODEGROUPS" ]; then
            echo "Found nodegroups: $NODEGROUPS"
            for NODEGROUP in $NODEGROUPS; do
              echo "Deleting nodegroup $NODEGROUP..."
              aws eks delete-nodegroup \
                --cluster-name ${{ env.CLUSTER_NAME }} \
                --nodegroup-name $NODEGROUP \
                --region ${{ env.AWS_REGION }} || true
            done
            
            echo "Waiting for nodegroups to delete (max 15 minutes)..."
            for NODEGROUP in $NODEGROUPS; do
              aws eks wait nodegroup-deleted \
                --cluster-name ${{ env.CLUSTER_NAME }} \
                --nodegroup-name $NODEGROUP \
                --region ${{ env.AWS_REGION }} || true
            done
          fi
          
          # Destroy Terraform infrastructure
          terraform destroy -auto-approve -input=false

          # Final verification
          if aws eks describe-cluster \
            --name ${{ env.CLUSTER_NAME }} \
            --region ${{ env.AWS_REGION }} &>/dev/null; then
            echo "::error::Cluster still exists after destroy!"
            exit 1
          else
            echo "Cluster successfully destroyed"
          fi
